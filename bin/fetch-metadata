#!/usr/bin/env python3

import json
import os
import sys

import auth

# 全部（包括全部公演和其它）
# https://www.youtube.com/playlist?list=PL0-h3TcYaV9HqlqusJYi3F_FyU-H3jxJW
PLAYLIST_ID = 'PL0-h3TcYaV9HqlqusJYi3F_FyU-H3jxJW'

HERE = os.path.dirname(os.path.realpath(__file__))
ROOT = os.path.dirname(HERE)

METADATA_DIR = os.path.join(ROOT, 'data', 'videos')

# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.playlistItems.html#list
def list_videos(youtube_client):
    videos = []

    list_request = youtube_client.playlistItems().list(
        part='snippet',
        playlistId=PLAYLIST_ID,
        maxResults=50,
    )
    while list_request:
        list_response = list_request.execute()
        videos.extend((playlist_item['snippet']['resourceId']['videoId'],
                       playlist_item['snippet']['title'])
                      for playlist_item in list_response['items'])
        list_request = youtube_client.playlistItems().list_next(list_request, list_response)

    return videos


# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.videos.html#list
def fetch_video_metadata(youtube_client, video_ids):
    metadata_items = []

    list_request = youtube_client.videos().list(
        part='contentDetails,fileDetails,snippet',
        id=','.join(video_ids),
        maxResults=50,
    )
    while list_request:
        list_response = list_request.execute()
        metadata_items.extend(list_response['items'])
        list_request = youtube_client.videos().list_next(list_request, list_response)

    return metadata_items


# data is a map mapping video ids to metadata objects
def persist_video_metadata(data):
    for video_id, metadata_obj in data.items():
        path = os.path.join(METADATA_DIR, f'{video_id}.json')
        print(path)
        with open(path, 'w') as fp:
            json.dump(metadata_obj, fp, ensure_ascii=False, indent=2, sort_keys=True)


def main():
    parser = auth.ArgumentParser()
    add = parser.add_argument
    add('-o', '--overwrite', action='store_true',
        help='overwrite already persisted data')
    add('-s', '--short', action='store_true',
        help='populate the video short list videos.txt instead; all other arguments are ignored in this mode')
    add('video_ids', nargs='*', metavar='VIDEO_ID',
        help='if no video id is given, fetch for all videos in the "全部公演" playlist')
    args = parser.parse_args()

    youtube_client = auth.get_youtube_client(args, 'youtube.readonly')

    if args.short:
        with open(os.path.join(ROOT, 'data/videos.txt'), 'w') as fp:
            for vid, title in list_videos(youtube_client):
                print(f'https://youtu.be/{vid}\t{title}', file=fp)
        sys.exit(0)

    video_ids = args.video_ids if args.video_ids else [vid for vid, title in list_videos(youtube_client)]
    if not args.overwrite:
        video_ids = [vid for vid in video_ids
                     if not os.path.exists(os.path.join(METADATA_DIR, f'{vid}.json'))]
    if video_ids:
        print(f'Fetching metadata for {",".join(video_ids)}')
    else:
        print('Nothing to fetch.')

    metadata_objs = fetch_video_metadata(youtube_client, video_ids)
    os.makedirs(METADATA_DIR, exist_ok=True)
    persist_video_metadata(dict(zip(video_ids, metadata_objs)))


if __name__ == '__main__':
    main()
