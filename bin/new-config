#!/usr/bin/env python3

import jinja2
import re
import shutil
import subprocess
import sys
try:
    import readline  # noqa; pylint: disable=unused-import
except ImportError:
    pass

import config
import utils
from common import BIN, VIDEO_CONFIGS_DIR, logger


THUMBNAILER = BIN / 'thumbnail'

STAGES = [
    ('Team SⅡ', '第48区'),
    ('Team NⅡ', '以爱之名'),
    ('Team HⅡ', '美丽世界'),
    ('Team X', '梦想的旗帜'),
    ('Team XⅡ', '代号XⅡ'),
    (None, '我们向前冲'),
]

CONFIG_TEMPLATE = jinja2.Template('''\
title: {{ title }}
datetime: {{ datetime }}
vod: {{ vod }}
{% if m3u8 -%}
m3u8: {{ m3u8 }}
{% endif -%}
tags:
{% for tag in tags -%}
  - {{ tag }}
{% endfor -%}
thumbnail: {{ thumbnail }}
playlists:
{% for playlist in playlists -%}
  - {{ playlist }}
{% endfor -%}
''')


def die(msg):
    logger.error(msg)
    sys.exit(1)


def inputs(prompt=''):
    return input(prompt).strip()


def hr():
    columns = shutil.get_terminal_size().columns
    print('-' * columns, file=sys.stderr)


def find_stage(stage):
    for team, stage_ in STAGES:
        if stage_ == stage:
            return team
    die(f'stage {stage} not recognized')


def find_latest_live_id():
    for file, attrs in reversed(config.list_vod_configs(include_past=True)):
        live_id = int(attrs.live_id)
        if live_id:
            logger.info(f'latest live_id from {file}')
            return live_id
    return None


def find_latest_perfnum(stage):
    for file, attrs in reversed(config.list_vod_configs(include_past=True)):
        if attrs.stage == stage and attrs.perfnum:
            logger.info(f'latest perf # from {file}')
            return int(attrs.perfnum)
    return None


def main():
    date = inputs('Date: ')
    if not re.match(r'^\d{8}$', date):
        die(f'invalid date {date}')

    time = inputs('Time (HH:MM in CST): ')
    if not re.match(r'^\d{2}:\d{2}$', time):
        die(f'invalid time {time}')
    # ISO 8601
    datetime = f'{date[:4]}-{date[4:6]}-{date[6:]}T{time}:00+08:00'

    group_abbrevs = ['snh', 'bej', 'gnz', 'shy', 'ckg']
    platform = inputs('platform [live.snh48.com]: ')
    if not platform:
        platform = 'live.snh48.com'
    elif platform in [f'live.{g}48.com' for g in group_abbrevs]:
        pass
    elif platform in [f'{g}48' for g in group_abbrevs]:
        platform = f'live.{platform}.com'
    elif platform in group_abbrevs:
        platform = f'live.{platform}48.com'
    else:
        die(f'unrecognized platform {platform}')
    platform_short = platform[5:8]
    assert platform_short in group_abbrevs

    if platform == 'live.snh48.com':
        vid_default = find_latest_live_id() + 1
        vid = inputs(f'{platform} id [{vid_default}]: ') or vid_default
    else:
        vid = inputs(f'{platform} id: ')
    try:
        vid = int(vid)
    except (TypeError, ValueError):
        die(f'invalid video ID {vid}')

    stage = inputs('Stage: ')

    m3u8 = inputs('M3U8: ')

    if not stage:
        # Special performance

        name = inputs('Name of special performance: ')
        if not name:
            die('name should not be empty')

        # Derive
        title = f'{date} {name}'
        vod = f'http://live.snh48.com/Index/invedio/id/{vid}'
        tags = ['SNH48']
        thumbnail = ''
        playlists = ['全部', '全部公演', '特别公演']

        file_default = f'{date}-{vid}-{name}.yml'
        file_input = inputs(f'Config file [{file_default}]: ')
        file = VIDEO_CONFIGS_DIR / (file_input or file_default)
    else:
        # Regular performance

        team = find_stage(stage)

        perfnum_default = find_latest_perfnum(stage)
        if perfnum_default is not None:
            perfnum_default += 1
        perfnum_default_display = f' [{perfnum_default:02d}]' if perfnum_default else ''
        perfnum_input = inputs(f'Performance #{perfnum_default_display}: ')
        if perfnum_input:
            try:
                perfnum = int(perfnum_input)
            except ValueError:
                die(f'invalid performance # {perfnum_input}')
        elif perfnum_default:
            perfnum = perfnum_default
        else:
            die('performance # not given')

        # Derive

        if team is not None:
            title = f'{date} {team} {stage} {perfnum:02d}'
        else:
            # Multi-team, e.g. 我们向前冲
            title = f'{date} {stage} {perfnum:02d}'
        vod = f'http://{platform}/Index/invedio/id/{vid}'
        tags = ['SNH48', stage]
        thumbnail = f'{date}-{stage}-{perfnum:02d}.png'
        playlists = ['全部', '全部公演']
        if team is not None:
            playlists.extend([f'{team}', f'{team} — {stage}'])
        else:
            playlists.append(stage)

        pvid = str(vid) if platform_short == 'snh' else f'{platform_short}{vid}'
        file = VIDEO_CONFIGS_DIR / f'{date}-{pvid}-{stage}-{perfnum:02d}.yml'

    # Render and write config file
    hr()
    print(file)
    content = CONFIG_TEMPLATE.render(
        title=title,
        datetime=datetime,
        vod=vod,
        m3u8=m3u8,
        tags=tags,
        thumbnail=thumbnail,
        playlists=playlists,
    )
    print(content, end='')
    with open(file, 'w') as fp:
        fp.write(content)

    # Generate thumbnail
    hr()
    if stage:
        logger.info('Generating thumbanil...')
        logger.info(f'thumbnail {stage} {date} {perfnum:02d}')
        cmd = [THUMBNAILER, stage, date, f'{perfnum:02d}']
        subprocess.run(cmd)
    else:
        logger.info('Please remember to generate the thumbnail.')

    utils.edit(file)


if __name__ == '__main__':
    main()
