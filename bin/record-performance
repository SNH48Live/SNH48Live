#!/usr/bin/env python3

import collections
import json
import os
import re
import sys
import tempfile
try:
    import readline
except ImportError:
    pass

import bs4
import requests

from members import MEMBERS

HERE = os.path.dirname(os.path.realpath(__file__))
ROOT = os.path.dirname(HERE)
VIDEO_METADATA_DIR = os.path.join(ROOT, 'videos', 'metadata')
DATASTORE = os.path.join(ROOT, 'performances.json')

STAGE_ASSOCIATIONS = {
    '': 'joint',
    '心的旅程': 's2',
    '专属派对': 'n2',
    '梦想的旗帜': 'x',
    '代号XⅡ': 'x2',
    '美丽世界': 'h2',
    '我们向前冲': 'joint',
}

def title2stage(title):
    for stage in STAGE_ASSOCIATIONS.keys():
        if stage and stage in title:
            return stage
    else:
        return ''

def stage2team(stage):
    if stage in STAGE_ASSOCIATIONS:
        return STAGE_ASSOCIATIONS[stage]
    else:
        raise ValueError(f"'{stage}' is not a recognized stage")

def validate_youtube_video_id(video_id):
    if not re.match(r'^[a-zA-Z0-9_-]{11}$', video_id):
        raise ValueError(f"'{video_id}' is not a valid YouTube video ID")

def retrieve_youtube_video_title(video_id):
    metadata_file = os.path.join(VIDEO_METADATA_DIR, f'{video_id}.json')
    if not os.path.isfile(metadata_file):
        raise ValueError(f'{metadata_file} does not exist; please run `fetch-metadata {video_id}`')
    with open(metadata_file) as fp:
        title = json.load(fp)['snippet']['title']
    print(f'[INFO] Title: {title}')
    return title

def validate_snh48club_video_id(snh48club_video_id):
    if not re.match(f'^\d+$', snh48club_video_id):
        raise ValueError(f"'{snh48club_video_id}' is not a valid snh48club video ID (should be numerical)")

# SNH48 Club's list of performers appears to be more accurate than the
# that from live.snh48.com. For instance, compare
#
#   http://live.snh48.com/Index/invedio/id/193
#
# and
#
#   http://www.snh48club.com/video/19822.html
#
# The official streaming site lists 12 members, while SNH48 Club lists
# 10; in particular, 江真仪 and 徐真 who are officially listed did not
# show up, presumably because the official list was based on the
# original plan (official lists are put up before the stage performances
# and do not change afterwards), while the unofficial list was actually
# human-curated post show. Therefore, since I can't review every single
# VOD, I'd rather trust SNH48 Club on the performer list. (I'm a one man
# shop after all, compared to apparently a team they've got.)
def fetch_performers_from_snh48club(snh48club_video_id):
    url = f'http://www.snh48club.com/video/{snh48club_video_id}.html'
    resp = requests.get(url)
    assert resp.status_code == 200, f'GET {url}: HTTP {resp.status_code}'

    soup = bs4.BeautifulSoup(resp.text, 'html.parser')
    title = soup.h1.text
    member_list = soup.find(id='spanMember')
    performers = [a.text for a in member_list.find_all('a')]
    performers.sort(key=lambda name: MEMBERS.index(name))

    print(f'[INFO] SNH48 Club title: {title}')

    # Note: We add a final comma so that we can easily query a performer
    # with the "has name followed by comma" criterion (assuming that no
    # member's name is a suffix of another's; I'll worry about that when
    # it actually happens).
    return ','.join(performers) + ','

# Prepend record a JSON line to the data store.
def prepend_to_data_store(record):
    record_str = json.dumps(record, ensure_ascii=False)
    if os.path.exists(DATASTORE):
        fd, path = tempfile.mkstemp(dir=os.path.dirname(DATASTORE),
                                    prefix=f'{os.path.basename(DATASTORE)}.')
        os.close(fd)
        with open(path, 'w') as fp:
            print(record_str, file=fp)
            with open(DATASTORE) as ofp:
                for line in ofp:
                    print(line, end='', file=fp)
        os.replace(path, DATASTORE)
    else:
        with open(DATASTORE, 'w') as fp:
            print(record_str, file=fp)

def main():
    try:
        video_id = input('YouTube video ID: ')
        if video_id:
            validate_youtube_video_id(video_id)
            title = retrieve_youtube_video_title(video_id)
        else:
            video_id = None
            title = input('Title: ')
        stage_default = title2stage(title)
        stage = input(f'Stage [{stage_default}]: ') or stage_default
        team_default = stage2team(stage)
        team = input(f'Team [{team_default}]: ') or team_default
        special = input(f'Special? [yN]: ').lower().startswith('y')
        snh48club_video_id = input('SNH48 Club video ID: ')
        if snh48club_video_id:
            validate_snh48club_video_id(snh48club_video_id)
            performers = fetch_performers_from_snh48club(snh48club_video_id)
        else:
            snh48club_video_id = None
            performers = input(f'Performers: ')

        record = collections.OrderedDict([
            ('title', title),
            ('team', team),
            ('stage', stage),
            ('special', special),
            ('video_id', video_id),
            ('performers', performers),
            ('snh48club_video_id', snh48club_video_id),
        ])
        print(json.dumps(record, indent=2, ensure_ascii=None), end='')
        prepend_to_data_store(record)
    except BaseException as e:
        sys.stderr.write(f'\n[ERROR] {e}\n')
        sys.exit(1)

if __name__ == '__main__':
    main()
