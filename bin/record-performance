#!/usr/bin/env python3

import collections
import json
import os
import re
import signal
import subprocess
import sys
import tempfile
try:
    import readline  # noqa; pylint: disable=unused-import
except ImportError:
    pass

import bs4
import requests

import stages
from common import BIN, DATA_DIR, VIDEO_CONFIGS_DIR, VIDEO_METADATA_DIR, logger
from members import MEMBERS


VIDEO_LIST = DATA_DIR / 'videos.txt'
ATTENDANCE_JSON = DATA_DIR / 'attendance.json'
DATASTORE = DATA_DIR / 'performances.json'
PARSER = BIN / 'parse-attendance-sheet'
OFFICIAL_PERFORMER_LIST_FETCHER = BIN / 'performers'
VALIDATOR = BIN / 'validate-performances'


def guess_video_id():
    # Read the most recent video_id already in DATASTORE.
    with open(DATASTORE) as fp:
        most_recent_recorded_vid = json.loads(fp.readline())['video_id']

    # Iterate through the video list (which is in reverse chronological order)
    # to find the first (chronologically) new entry.
    first_new_vid = None
    with open(VIDEO_LIST) as fp:
        for line in fp:
            url, title = line.strip().split('\t')
            vid = url[-11:]
            if vid == most_recent_recorded_vid:
                return first_new_vid
            else:
                logger.info(f'new entry: {vid}\t{title}')
                first_new_vid = vid
    return first_new_vid


def guess_live_id_from_configs(date, stage):
    # pattern lifted from new-config.
    # stage could be a one-off special performance, in which case the perfnum part is omitted.
    pattern = re.compile(r'^(?P<date>\d{8})-(?P<vid>\d+)-'
                         r'(?P<stage>\w+)(-(?P<perfnum>\d{2}))?\.yml$')
    for file in sorted(VIDEO_CONFIGS_DIR.glob(f'**/{date}-*.yml')):
        m = pattern.match(file.name)
        if m and ((stage == m.group('stage')) or  # regular performance
                  (not stage and not m.group('perfnum'))):  # special performance
            logger.info(f'live_id guessed from {file.name}')
            vid = m.group('vid')
            if vid == '0':
                # vid 0 stands for no such vid
                return None
            else:
                return vid
    return None


def validate_youtube_video_id(video_id):
    if not re.match(r'^[a-zA-Z0-9_-]{11}$', video_id):
        raise ValueError(f"'{video_id}' is not a valid YouTube video ID")


def retrieve_youtube_video_title(video_id):
    metadata_file = VIDEO_METADATA_DIR / f'{video_id}.json'
    if not metadata_file.exists():
        raise ValueError(f'{metadata_file} does not exist; please run `fetch-metadata {video_id}`')
    with open(metadata_file) as fp:
        title = json.load(fp)['snippet']['title']
    logger.info(f'Title: {title}')
    return title


def validate_live_id(live_id):
    if not re.match(r'^\d+$', live_id):
        raise ValueError(f"'{live_id}' is not a valid live.snh48.com video ID "
                         '(should be numerical)')


def validate_snh48club_video_id(snh48club_video_id):
    if not re.match(r'^\d+$', snh48club_video_id):
        raise ValueError(f"'{snh48club_video_id}' is not a valid snh48club video ID "
                         '(should be numerical)')


def fetch_performers_from_official_site(live_id):
    return subprocess.check_output([
        str(OFFICIAL_PERFORMER_LIST_FETCHER),
        str(live_id),
    ]).strip().decode('utf-8') + ','


# SNH48 Club's list of performers appears to be more accurate than the
# that from live.snh48.com. For instance, compare
#
#   http://live.snh48.com/Index/invedio/id/193
#
# and
#
#   http://www.snh48club.com/video/19822.html
#
# We use this source for crosscheck.
def fetch_performers_from_snh48club(snh48club_video_id):
    url = f'http://www.snh48club.com/video/{snh48club_video_id}.html'
    resp = requests.get(url)
    assert resp.status_code == 200, f'GET {url}: HTTP {resp.status_code}'

    soup = bs4.BeautifulSoup(resp.text, 'html.parser')
    title = soup.h1.text
    member_list = soup.find(id='spanMember')
    performers = [a.text for a in member_list.find_all('a')]
    performers.sort(key=MEMBERS.index)

    logger.info(f'SNH48 Club title: {title}')

    # Note: We add a final comma so that we can easily query a performer
    # with the "has name followed by comma" criterion (assuming that no
    # member's name is a suffix of another's; I'll worry about that when
    # it actually happens).
    return ','.join(performers) + ','


def fetch_performers_from_attendance_sheet(title):
    with open(ATTENDANCE_JSON) as fp:
        data = json.load(fp)
        if title in data:
            performers = data[title]['全部']
            performers.sort(key=MEMBERS.index)
            return ','.join(performers) + ','
        else:
            return None


# Prepend record a JSON line to the data store.
def prepend_to_data_store(record):
    record_str = json.dumps(record, ensure_ascii=False)
    if DATASTORE.exists():
        fd, path = tempfile.mkstemp(dir=DATASTORE.parent, prefix=f'{DATASTORE.name}.')
        os.close(fd)
        with open(path, 'w') as fp:
            print(record_str, file=fp)
            with open(DATASTORE) as ofp:
                for line in ofp:
                    print(line, end='', file=fp)
        os.replace(path, DATASTORE)
    else:
        with open(DATASTORE, 'w') as fp:
            print(record_str, file=fp)


def main():
    try:
        # Parse attendance sheet to make sure attendance.json is up-to-date.
        subprocess.check_call([str(PARSER)])

        video_id_default = guess_video_id()
        if video_id_default:
            video_id = input(f'YouTube video ID [{video_id_default}]: ') or video_id_default
        else:
            video_id = input('YouTube video ID: ')
        if video_id:
            validate_youtube_video_id(video_id)
            title = retrieve_youtube_video_title(video_id)
        else:
            video_id = None
            title = input('Title: ')
        stage_default = stages.title2stage(title)
        stage = input(f'Stage [{stage_default}]: ') or stage_default
        team_default = stages.stage2team(stage)
        team = input(f'Team [{team_default}]: ') or team_default
        special = input(f'Special? [yN]: ').lower().startswith('y')
        live_id_default = guess_live_id_from_configs(title[:8], stage)
        if live_id_default:
            live_id = input(f'live.snh48.com video ID [{live_id_default}]: ') or live_id_default
        else:
            live_id = input('live.snh48.com video ID: ')
        snh48club_video_id = input('SNH48 Club video ID: ')

        if live_id:
            validate_live_id(live_id)
            performers_official = fetch_performers_from_official_site(live_id)
        else:
            live_id = None
            performers_official = None

        if snh48club_video_id:
            validate_snh48club_video_id(snh48club_video_id)
            performers_club = fetch_performers_from_snh48club(snh48club_video_id)
        else:
            snh48club_video_id = None
            performers_club = None

        performers_local = fetch_performers_from_attendance_sheet(title)

        # Handle SIGTSTP by raising a TerminalStop exception from this point forward
        class TerminalStop(Exception):
            def __str__(self):
                return 'TerminalStop'

        def sigtstp_handler(signum, frame):
            # pylint: disable=unused-argument
            raise TerminalStop

        signal.signal(signal.SIGTSTP, sigtstp_handler)

        first_round = True
        while True:
            try:
                if performers_local and performers_official == performers_club == performers_local:
                    # All good
                    performers = performers_local
                    logger.info(f'Performers: {performers}')
                else:
                    if performers_official:
                        logger.info(f'Performers from live.snh48.com:  {performers_official}')
                    if performers_club:
                        logger.info(f'Performers from snh48club.com:   {performers_club}')
                    if performers_local:
                        logger.info(f'Performers from attendance.json: {performers_local}')
                    if first_round:
                        logger.info('Send ^Z to reparse attendance sheet')
                        first_round = False
                    performers = input(f'Performers [use attendance.json]: ')
                    if not performers:
                        performers = performers_local
                break
            except TerminalStop:
                logger.info('Reloading attendance sheet')
                subprocess.run([str(PARSER)])
                performers_local = fetch_performers_from_attendance_sheet(title)

        record = collections.OrderedDict([
            ('title', title),
            ('team', team),
            ('stage', stage),
            ('special', special),
            ('video_id', video_id),
            ('performers', performers),
            ('live_id', live_id),
            ('snh48club_video_id', snh48club_video_id),
        ])
        print(json.dumps(record, indent=2, ensure_ascii=None), end='')
        prepend_to_data_store(record)

        sys.stderr.write('\nValidating performances.json...\n')
        subprocess.run([str(VALIDATOR)])
    except BaseException as e:
        logger.error(e)
        sys.exit(1)


if __name__ == '__main__':
    main()
