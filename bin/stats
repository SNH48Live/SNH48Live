#!/usr/bin/env python3

import datetime
import textwrap

import arrow
import attrdict

import auth

CHANNEL_ID = 'UC10BBCJQasWk_08Fdz0XCsQ'
# 全部（包括全部公演和其它）
# https://www.youtube.com/playlist?list=PL0-h3TcYaV9HqlqusJYi3F_FyU-H3jxJW
PLAYLIST_ID = 'PL0-h3TcYaV9HqlqusJYi3F_FyU-H3jxJW'

# Number of videos to include in the report
RECENT_VIDEOS_COUNT = 5
TOP_VIDEOS_COUNT = 10

# Returns an AttrDict with the following attributes:
# - viewCount
# - commentCount
# - subscriberCount
# - hiddenSubscriberCount (bool)
# - videoCount
# - days (days since channel was created; this one is not directly in
#   the API, but rather, calculated)
# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.channels.html#list
def get_channel_stats(youtube):
    response = youtube.channels().list(part='statistics,snippet', id=CHANNEL_ID).execute()
    channel = attrdict.AttrDict(response)('items')[0]
    stats = channel.statistics
    stats.days = (arrow.now() - arrow.get(channel.snippet.publishedAt)).days + 1
    return stats

# Returns a list of ids of the top videos by view count.
# Not always up-to-date due to the way YouTube Analytics API works.
# https://developers.google.com/youtube/analytics/v1/data_model
# https://developers.google.com/youtube/analytics/v1/channel_reports#top-videos-reports
# https://developers.google.com/resources/api-libraries/documentation/youtubeAnalytics/v1/python/latest/youtubeAnalytics_v1.reports.html#query
def get_top_videos(youtube_analytics, max_results=5):
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    response = youtube_analytics.reports().query(
        ids=f'channel=={CHANNEL_ID}',
        start_date='1970-01-01',
        end_date=today,
        metrics='views',
        dimensions='video',
        max_results=max_results,
        sort='-views',
    ).execute()
    # response.rows look like
    #
    #   [
    #     ['0zBTmTE2ya8', 307.0],
    #     ['Jk6kl4L0WhY', 119.0],
    #     ['qyX4O-C3a_s', 103.0],
    #     ['LMWojlwoTCo', 79.0],
    #     ['OplqD48kxCM', 76.0],
    #   ]
    return list(next(zip(*response['rows'])))

# Get a list of ids of recently published videos.
# max_results is capped at 50.
# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.playlistItems.html#list
def get_recent_videos(youtube, max_results=5):
    response = youtube.playlistItems().list(
        part='contentDetails',
        playlistId=PLAYLIST_ID,
        maxResults=min(max_results, 50),
    ).execute()
    return [item.contentDetails.videoId for item in attrdict.AttrDict(response)('items')]

# Returns a list of AttrDict's with the following attributes:
# - id
# - title
# - viewCount
# - likeCount
# - dislikeCount
# - favoriteCount
# - commentCount
# Limited to 50 entries.
# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.videos.html#list
def get_video_stats(youtube, video_ids):
    response = youtube.videos().list(
        part='snippet,statistics',
        id=','.join(video_ids),
        maxResults=50,
    ).execute()
    videos = []
    for item in response['items']:
        video = attrdict.AttrDict(item['statistics'])
        video.id = item['id']
        video.title = item['snippet']['title']
        videos.append(video)
    return videos

def prepare_report_data(youtube, youtube_analytics):
    channel_stats = get_channel_stats(youtube)
    recent_vids = get_recent_videos(youtube, max_results=RECENT_VIDEOS_COUNT)
    top_vids = get_top_videos(youtube_analytics, max_results=TOP_VIDEOS_COUNT)
    video_stats = get_video_stats(youtube, recent_vids + top_vids)
    recent_video_stats = video_stats[:RECENT_VIDEOS_COUNT]
    top_video_stats = video_stats[RECENT_VIDEOS_COUNT:]
    return {
        'channel_stats': channel_stats.copy(),
        'recent_videos': [video.copy() for video in recent_video_stats],
        'top_videos': [video.copy() for video in top_video_stats],
    }

def generate_textual_report(data, color=True):
    red = '\x1b[31m'
    green = '\x1b[32m'
    yellow = '\x1b[33m'
    blue = '\x1b[34m'
    magenta = '\x1b[35m'
    cyan = '\x1b[36m'
    white = '\x1b[37m'
    bold = '\x1b[1m'
    reset = '\x1b[0m'

    section_title_color = (bold + blue) if color else ''
    channel_stat_color = green if color else ''
    video_title_color = bold if color else ''
    video_url_color = ''
    views_color = cyan if color else ''
    likes_color = green if color else ''
    dislikes_color = red if color else ''
    comments_color = cyan if color else ''
    reset = reset if color else ''

    data = attrdict.AttrDict(data)
    report = textwrap.dedent(f'''\
    {section_title_color}=== CHANNEL ==={reset}
    days:        {channel_stat_color}{data.channel_stats.days}{reset}
    videos:      {channel_stat_color}{data.channel_stats.videoCount}{reset}
    subscribers: {channel_stat_color}{data.channel_stats.subscriberCount}{reset}
    views:       {channel_stat_color}{data.channel_stats.viewCount}{reset}

    ''')

    for section_title, videos in [('RECENT VIDEOS', data.recent_videos),
                                  ('TOP VIDEOS', data.top_videos)]:
        report += f'{section_title_color}=== {section_title} ==={reset}\n'
        for video in videos:
            title = video.title
            url = f'https://youtu.be/{video.id}'
            views = f'{video.viewCount}v'
            likes = f'+{video.likeCount}'
            dislikes = f'-{video.dislikeCount}'
            comments = f'{video.commentCount}c'
            report += textwrap.dedent(f'''\
            {video_title_color}{title}{reset}
            {video_url_color}{url}{reset}
            {views_color}{views}{reset}\t{likes_color}{likes}{reset}\t{dislikes_color}{dislikes}{reset}\t{comments_color}{comments}{reset}

            ''')

    return report

def main():
    parser = auth.ArgumentParser()
    add = parser.add_argument
    add('-nc', '--no-color', action='store_true',
        help='do not colorize output')
    add('-np', '--no-pager', action='store_true',
        help='do not use pager')
    args = parser.parse_args()

    youtube = auth.get_youtube_client(args, 'youtube.readonly')
    youtube_analytics = auth.get_youtube_analytics_client(args, 'yt-analytics.readonly')
    data = prepare_report_data(youtube, youtube_analytics)
    report = generate_textual_report(data, color=not args.no_color)
    if args.no_pager:
        print(report, end='')
    else:
        import pydoc
        pydoc.pager(report)

if __name__ == '__main__':
    main()
