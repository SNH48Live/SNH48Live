#!/usr/bin/env python3

import argparse
import logging
import os
import re

import httplib2

import googleapiclient.discovery
import oauth2client.client
import oauth2client.file
import oauth2client.tools


logging.basicConfig(format='[%(levelname)s] %(name)s: %(message)s', level=logging.ERROR)
logger = logging.getLogger('update-metadata')
logger.setLevel(logging.INFO)

YOUTUBE_SCOPE = 'https://www.googleapis.com/auth/youtube'
YOUTUBE_API_SERVICE_NAME = 'youtube'
YOUTUBE_API_VERSION = 'v3'

HERE = os.path.dirname(os.path.realpath(__file__))
ROOT = os.path.dirname(HERE)

# Download clients_secrets.json from
#   https://console.developers.google.com/apis/credentials?project=YOUR_PROJECT
# YouTube Data API needs to be enabled for the project.
CLIENT_SECRETS_FILE = os.path.join(ROOT, 'config', 'client_secrets.json')

# Auto generated.
OAUTH_CREDENTIALS_FILE = os.path.join(ROOT, 'config', 'metadata_updater_credentials.json')

# This variable defines a message to display if the CLIENT_SECRETS_FILE is
# missing.
MISSING_CLIENT_SECRETS_MESSAGE = f'''
WARNING: Please configure OAuth 2.0 by downloading client_secrets.json from

  https://console.developers.google.com/apis/credentials?project=YOUR_PROJECT

and putting it at

  {CLIENT_SECRETS_FILE}

For more information about the client_secrets.json file format, please visit:
https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
'''


def get_authenticated_service(args):
    flow = oauth2client.client.flow_from_clientsecrets(
        CLIENT_SECRETS_FILE,
        scope=YOUTUBE_SCOPE,
        message=MISSING_CLIENT_SECRETS_MESSAGE,
    )

    storage = oauth2client.file.Storage(OAUTH_CREDENTIALS_FILE)
    credentials = storage.get()

    if credentials is None or credentials.invalid:
        credentials = oauth2client.tools.run_flow(flow, storage, args)

    return googleapiclient.discovery.build(
        YOUTUBE_API_SERVICE_NAME,
        YOUTUBE_API_VERSION,
        http=credentials.authorize(httplib2.Http()),
    )


# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.videos.html#list
def fetch_video_metadata(youtube_client, video_id):
    list_request = youtube_client.videos().list(
        part='snippet',
        id=video_id,
    )
    list_response = list_request.execute()
    items = list_response['items']
    if not items:
        raise ValueError('video_id does not exist')
    else:
        return items[0]


# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.videos.html#update
def update_title(youtube_client, video_id, pattern, repl):
    metadata = fetch_video_metadata(youtube_client, video_id)
    snippet = metadata['snippet']
    if pattern:
        title = snippet['title']
        m = re.search(pattern, title)
        if m:
            new_title = m.expand(repl)
        else:
            logger.warn(f'{video_id} title unchanged: {title}')
            return
    else:
        # Replace title with repl, verbatim, without consulting the existing title
        new_title = repl

    snippet['title'] = new_title
    update_request = youtube_client.videos().update(
        part='id,snippet',
        body=dict(
            id=video_id,
            snippet=snippet,
        ),
    )
    update_request.execute()
    logger.info(f'{video_id} title updated: {new_title}')


# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.videos.html#update
def update_description(youtube_client, video_id, description):
    metadata = fetch_video_metadata(youtube_client, video_id)
    snippet = metadata['snippet']
    snippet['description'] = description

    update_request = youtube_client.videos().update(
        part='id,snippet',
        body=dict(
            id=video_id,
            snippet=snippet,
        ),
    )
    update_request.execute()
    logger.info(f'{video_id} description updated')


# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.videos.html#update
def tag(youtube_client, video_id, tags, *, overwrite=False):
    metadata = fetch_video_metadata(youtube_client, video_id)
    snippet = metadata['snippet']
    if overwrite:
        snippet['tags'] = tags
    else:
        for tag in tags:
            if tag not in snippet['tags']:
                snippet['tags'].append(tag)

    update_request = youtube_client.videos().update(
        part='id,snippet',
        body=dict(
            id=video_id,
            snippet=snippet,
        ),
    )
    update_request.execute()
    logger.info(f'{video_id} tags updated: {",".join(snippet["tags"])}')


# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.videos.html#update
def publish(youtube_client, video_id):
    update_request = youtube_client.videos().update(
        part='id,status',
        body=dict(
            id=video_id,
            status=dict(
                privacyStatus='public',
            ),
        ),
    )
    update_request.execute()
    logger.info(f'{video_id} published')


# https://developers.google.com/resources/api-libraries/documentation/youtube/v3/python/latest/youtube_v3.playlistItems.html#insert
def insert_playlist(youtube_client, video_id, playlist_id, *, position=0):
    insert_request = youtube_client.playlistItems().insert(
        part='snippet',
        body=dict(
            snippet=dict(
                playlistId=playlist_id,
                resourceId=dict(
                    kind='youtube#video',
                    videoId=video_id,
                ),
                position=position,
            ),
        ),
    )
    insert_request.execute()
    logger.info(f'{video_id} inserted into playlist {playlist_id}')


def update_title_handler(args):
    for video_id in args.video_ids.split(','):
        update_title(args.youtube_client, video_id, args.pattern, args.repl)


def update_description_handler(args):
    for video_id in args.video_ids.split(','):
        update_description(args.youtube_client, video_id, args.description)


def tag_handler(args):
    for video_id in args.video_ids.split(','):
        tag(args.youtube_client, video_id, args.tags.split(','), overwrite=args.overwrite)


def publish_handler(args):
    for video_id in args.video_ids.split(','):
        publish(args.youtube_client, video_id)


def insert_playlist_handler(args):
    for video_id in args.video_ids.split(','):
        for playlist_id in args.playlist_ids.split(','):
            insert_playlist(args.youtube_client, video_id, playlist_id)


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        parents=[oauth2client.tools.argparser],
    )
    subparsers = parser.add_subparsers()

    desc = '''If pattern is nonempty, the title is replaced with
    re.search(pattern, current_title).expand(repl); otherwise, the title
    is directly replaced with repl.'''
    parser_update_title = subparsers.add_parser('update-title', description=desc)
    add = parser_update_title.add_argument
    add('video_ids', help='comma-delimited video IDs')
    add('pattern')
    add('repl')
    parser_update_title.set_defaults(handler=update_title_handler)

    parser_update_description = subparsers.add_parser('update-description')
    add = parser_update_description.add_argument
    add('video_ids', help='comma-delimited video IDs')
    add('description')
    parser_update_description.set_defaults(handler=update_description_handler)

    parser_tag = subparsers.add_parser('tag')
    add = parser_tag.add_argument
    add('-o', '--overwrite', action='store_true', help='overwrite existing tags')
    add('video_ids', help='comma-delimited video IDs')
    add('tags', help='comma-delimited new tags')
    parser_tag.set_defaults(handler=tag_handler)

    parser_publish = subparsers.add_parser('publish')
    add = parser_publish.add_argument
    add('video_ids', help='comma-delimited video IDs')
    parser_publish.set_defaults(handler=publish_handler)

    parser_insert_playlist = subparsers.add_parser('insert-playlist')
    add = parser_insert_playlist.add_argument
    add('video_ids', help='comma-delimited video IDs')
    add('playlist_ids', help='comma-delimited playlist IDs')
    parser_insert_playlist.set_defaults(handler=insert_playlist_handler)

    args = parser.parse_args()
    args.youtube_client = get_authenticated_service(args)
    args.handler(args)


if __name__ == '__main__':
    main()
