#!/usr/bin/env python3

# Adapted from https://github.com/youtube/api-samples/blob/master/python/upload_video.py

import argparse
import http.client
import httplib2
import os
import random
import sys
import time

import googleapiclient.discovery
import googleapiclient.http
import oauth2client.client
import oauth2client.file
import oauth2client.tools
from apiclient.errors import HttpError


# Explicitly tell the underlying HTTP transport library not to retry, since
# we are handling retry logic ourselves.
httplib2.RETRIES = 1

# Maximum number of times to retry before giving up.
MAX_RETRIES = 10

# Always retry when these exceptions are raised.
RETRIABLE_EXCEPTIONS = (
    httplib2.HttpLib2Error,
    IOError,
    http.client.BadStatusLine,
    http.client.CannotSendHeader,
    http.client.CannotSendRequest,
    http.client.ImproperConnectionState,
    http.client.IncompleteRead,
    http.client.NotConnected,
    http.client.ResponseNotReady,
)

# Always retry when an googleapiclient.errors.HttpError with one of
# these status codes is raised.
RETRIABLE_STATUS_CODES = [500, 502, 503, 504]

# This OAuth 2.0 access scope allows an application to upload files to
# the authenticated user's YouTube channel, but doesn't allow other
# types of access.
YOUTUBE_UPLOAD_SCOPE = 'https://www.googleapis.com/auth/youtube.upload'
YOUTUBE_API_SERVICE_NAME = 'youtube'
YOUTUBE_API_VERSION = 'v3'

HERE = os.path.dirname(os.path.realpath(__file__))
ROOT = os.path.dirname(HERE)

# Download clients_secrets.json from
#   https://console.developers.google.com/apis/credentials?project=YOUR_PROJECT
# YouTube Data API needs to be enabled for the project.
CLIENT_SECRETS_FILE = os.path.join(ROOT, 'config', 'client_secrets.json')

# Auto generated.
OAUTH_CREDENTIALS_FILE = os.path.join(ROOT, 'config', 'uploader_credentials.json')

# This variable defines a message to display if the CLIENT_SECRETS_FILE is
# missing.
MISSING_CLIENT_SECRETS_MESSAGE = f'''
WARNING: Please configure OAuth 2.0 by downloading client_secrets.json from

  https://console.developers.google.com/apis/credentials?project=YOUR_PROJECT

and putting it at

  {CLIENT_SECRETS_FILE}

For more information about the client_secrets.json file format, please visit:
https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
'''

VALID_PRIVACY_STATUSES = ('public', 'private', 'unlisted')


def get_authenticated_service(args):
    flow = oauth2client.client.flow_from_clientsecrets(
        CLIENT_SECRETS_FILE,
        scope=YOUTUBE_UPLOAD_SCOPE,
        message=MISSING_CLIENT_SECRETS_MESSAGE,
    )

    storage = oauth2client.file.Storage(OAUTH_CREDENTIALS_FILE)
    credentials = storage.get()

    if credentials is None or credentials.invalid:
        credentials = oauth2client.tools.run_flow(flow, storage, args)

    return googleapiclient.discovery.build(
        YOUTUBE_API_SERVICE_NAME,
        YOUTUBE_API_VERSION,
        http=credentials.authorize(httplib2.Http()),
    )


# https://developers.google.com/youtube/v3/docs/videos/insert
def initialize_upload(youtube_client, args):
    body=dict(
        snippet=dict(
            title=args.title,
            description=args.description,
            tags=args.tags.split(',') if args.tags else None,
            categoryId=args.category,
            defaultLanguage=args.language,
            defaultAudioLanguage=args.language,
        ),
        status=dict(
            privacyStatus=args.privacy,
            publicStatsViewable=False,
        ),
    )

    # Call the API's videos.insert method to create and upload the video.
    insert_request = youtube_client.videos().insert(
        part=','.join(body.keys()),
        body=body,
        # chunksize=-1 (stream in a single request) is most efficient.
        # https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaFileUpload-class.html
        media_body=googleapiclient.http.MediaFileUpload(args.file, chunksize=-1, resumable=True)
    )

    resumable_upload(insert_request)


# This method implements an exponential backoff strategy to resume a
# failed upload.
def resumable_upload(insert_request):
    response = None
    error = None
    retry = 0
    while response is None:
        try:
            print('Uploading file...')
            status, response = insert_request.next_chunk()
            if response is not None:
                if 'id' in response:
                    print('Video id \'%s\' was successfully uploaded.' % response['id'])
                else:
                    exit('The upload failed with an unexpected response: %s' % response)
        except HttpError as e:
            if e.resp.status in RETRIABLE_STATUS_CODES:
                error = 'A retriable HTTP error %d occurred:\n%s' % (e.resp.status,
                                                                     e.content)
            else:
                raise
        except RETRIABLE_EXCEPTIONS as e:
            error = 'A retriable error occurred: %s' % e

        if error is not None:
            print(error)
            retry += 1
            if retry > MAX_RETRIES:
                exit('No longer attempting to retry.')

            max_sleep = 2 ** retry
            sleep_seconds = random.random() * max_sleep
            print('Sleeping %f seconds and then retrying...' % sleep_seconds)
            time.sleep(sleep_seconds)


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        parents=[oauth2client.tools.argparser],
    )
    add = parser.add_argument
    add('file',
        help='video file to upload')
    add('-t', '--title', default='Title not set',
        help='video title')
    add('-d', '--description', default='Description not set.',
        help='video description')
    add('--tags', default='SNH48',
        help='comma-delimited list of video tags; default is SNH48')
    add('-c', '--category', default=24,
        help='mumeric video category code (https://git.io/vSqOz); default is 24 for Entertainment')
    add('-p', '--privacy', choices=VALID_PRIVACY_STATUSES, default='unlisted',
        help='video privacy status; default is unlisted')
    add('-l', '--language', default='zh-CN',
        help='language of the video\'s title, description, and default audio track; default is \'zh-CN\'')
    args = parser.parse_args()

    if not os.path.isfile(args.file):
        exit(f'Error: {args.file} not found.')

    youtube_client = get_authenticated_service(args)
    try:
        initialize_upload(youtube_client, args)
    except HttpError as e:
        print('An HTTP error %d occurred:\n%s' % (e.resp.status, e.content))


if __name__ == '__main__':
    main()
